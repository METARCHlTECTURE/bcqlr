@use "../abstracts/fonts";
@use "../abstracts/mixins";
@use "../abstracts/variables";

// syntax highlight by rouge
// list of tokens: https://github.com/rouge-ruby/rouge/wiki/List-of-tokens

.highlight {
  overflow: hidden;
  word-wrap: break-word;
  color: variables.$code-primary;
  font-family: fonts.$font-monospace;
  font-size: variables.$font-smaller;
  line-height: 1.3;
  padding: 5px 5px 7px 5px;
  .w /* specially highlighted whitespace */ {
    color: rgba(variables.$code-background, 0.6);
  }
  .err /* Error */ {
    color: variables.$error;
    background-color: inherit;
  }
  .x /* Other. Token for data not matched by a parser */ {
    color: variables.$code-primary;
  }
  // Keyword
  .k, /* Keyword */
  .kd, /* Declaration */
  .kp /* Pseudo. Keywords that aren't really keywords */ {
    color: variables.$keyword;
    font-weight: bold;
  }
  .kc /* Constant */ {
    color: variables.$global;
    font-weight: bold;
  }
  .kn /* Namespace */ {
    color: variables.$namespace;
  }
  .kr /* Reserved */ {
    color: variables.$keyword;
    font-style: italic;
  }
  .kt/* Type */ {
    color: variables.$type;
    font-weight: bold;
  }
  // Name
  .n /* Variable/function names */
  .na, /* Attribute */
  .py, /* Property */
  .nl, /* Label */
  .nx, /* Other */
  .nt, /* Tag */
  .nv, /* Variable */
  .vc, /*  Variable.class */
  .vg, /* Variable.Global */
  .vi /* Variable.Instance */ {
    color: variables.$variable;
  }
  .nb,/* Builtin */
  .bp/* Builtin.Pseudo */ {
    color: variables.$built-in;
  }
  .nc /* Class */ {
    color: variables.$class;
    font-weight: bold;
  }
  .no/* Constant */ {
    color: variables.$global;
    font-weight: bold;
  }
  .nd /* Decorator */ {
    color: variables.$built-in;
    font-weight: bold;
  }
  .nf /* Funtion */
  .ni /* Entity. Token for entitites such as &nbsp; in HTML */ {
    color: variables.$code-primary;
  }
  .ne /* Exception */ {
    color: variables.$error;
  }
  .nn /* Namespace */ {
    color: variables.$namespace;
  }
  // Literal
  .l /* Any literal */ {
    color: variables.$string;
  }
  // Literal.String
  .s, 
  .s1, /* Single */
  .sb, /* Backtick */
  .sd, /* Doc */
  .s2, /* Double */
  .sh, /* Heredoc */
  .sx  /* Other */ {
    color: variables.$string;
  }
  .sr, /* Regex */
  .sc, /* Char */ 
  .ss, /* Symbol */ 
  .si, /* Interpol */
  .se /* Escape */ {
    color: variables.$string;
    font-weight: bold;
  }
  // Literal.Number
  .m, /* Float */
  .mf, /* Hex */
  .mh, /* Integer */
  .mi, /* Integer.Long */
  .il, /* Oct */
  .mo, /* Hex */
  .mx, /* Binary literals */
  .mb {
    color: variables.$number;
}
  .ld /* Literal.Date */ {
    color: variables.$number;
    font-style: italic;
  }
  // Operator and Punctuation
  .o, /* Operator */
  .ow, /* Operator.Word */
  .p /* Punctuation */ {
    color: variables.$punctuation;
  }
  // Comment
  .c,
  .cm, /* Multiline */
  .cs /* Special */ {
    color: variables.$comment;
  }
  .cp /* Preproc */ {
    color: variables.$comment;
    font-weight: bold;
    font-style: italic;
  }
  .c1 /* Single */ {
    color: variables.$comment;
    font-style: italic;
  }
  // Generic - Unstyled token
  .gd /* Deleted */ {
    color: variables.$built-in;
  }
  .gi /* Inserted */ {
    color: variables.$string;
  }
  .ge /* Emph */ {
    color: variables.$code-primary;
    font-style: italic;
  }
  .gr /* Error */
  {
      color: variables.$error;
      background-color: variables.$error-background;
  }
  .gs /* Strong */ {
    color: variables.$code-primary;    
    font-weight: bold;
  }
  .go /* Output */ {
    background-color: variables.$error-background;    
  }
  .gt /* Trackback */
   {
    color: variables.$string;
    font-weight: bold;
    background-color: variables.$error-background;    
  }
  .gl /* Lineno */ {
    color: variables.$code-primary;
    background: variables.$error-background;
  }
  .gp, /* Prompt */
  .gh, /* Heading */
  .gu /* Subheading */ {
    color: variables.$code-primary;
    font-weight: bold;
  }
}
.highlight table {
    margin-bottom: 0;
    font-size: 1em;
    border: 0;
    td {
      padding: 0;
      width: calc(100% - 1em);
      border: 0;
      /* line numbers*/
      &.gutter,
      &.rouge-gutter {
        padding-right: 1em;
        width: 1em;
        color: variables.$code-primary;
        border-right: variables.$medium-border;
        text-align: right;
      }
      /* code */
      &.code,
      &.rouge-code {
        padding-left: 1em;
      }
    }
    pre {
      margin: 0;
    }
  }
.highlight pre {
  background-color: variables.$code-background;  
  overflow-x: auto;
  border: variables.$thin-border;
  @include mixins.thin_scrollbar; 
  // max-width: 99%;
  }
.highlight .hll {
    background-color: variables.$code-background;
  }